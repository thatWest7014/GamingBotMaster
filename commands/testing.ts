import { Client, CommandInteraction, Interaction } from 'discord.js';
import { SlashCommandBuilder } from 'discord.js';

// Define the embed content
const testEmbed = new MessageEmbed()
  .setTitle('Test Command Successful!')
  .setDescription('This is a test embed generated by the /test command.')
  .setColor('#00ff00');

export default class TestCommand {
  // Define the slash command builder
  private readonly command = new SlashCommandBuilder()
    .setName('test')
    .setDescription('Runs a test command and returns an embed.');

  public getSlashCommand(): SlashCommandBuilder {
    return this.command;
  }

  public async onCommand(interaction: CommandInteraction) {
    // Check for the specific subcommand (optional)
    // if (interaction.options.getSubcommand() === 'someSubcommand') {
    //   // Handle subcommand logic here
    // }

    // Access the bot token from environment variable
    const token = process.env.DISCORD_TOKEN;

    if (!token) {
      console.error('Error: Missing DISCORD_TOKEN environment variable.');
      return await interaction.reply('An error occurred. Please check the logs.');
    }

    // Perform actions requiring the bot token here (optional)
    // (This section is for demonstration purposes and might not be necessary for the /test command)
    // Example: Sending a message using the token
    const guild = interaction.guild;
    if (guild) {
      const channel = guild.channels.cache.get(interaction.channelId);
      if (channel) {
        try {
          await channel.send('Test message using the bot token!');
        } catch (error) {
          console.error('Error sending message:', error);
        }
      }
    }

    await interaction.reply({ embeds: [testEmbed] });
  }
}

const client = new Client({ intents: [Intents.FLAGS.GUILDS] });

// Register the command with Discord after the client is created
client.once('ready', async () => {
  console.log('Logged in as:', client.user.tag);

  const command = new TestCommand().getSlashCommand();
  try {
    console.log('Registering command:', command.name);
    await client.application?.commands.create(command);
  } catch (error) {
    console.error('Error registering command:', error);
  }
});

// Event listener for any interaction (optional, can be more specific)
client.on('interactionCreate', async (interaction: Interaction) => {
  if (!interaction.isCommand()) return;

  const { commandName } = interaction;

  if (commandName === 'test') {
    await new TestCommand().onCommand(interaction);
  }
});

client.login(process.env.DISCORD_TOKEN); // Access token from environment variable
